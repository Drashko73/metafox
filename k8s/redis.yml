apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-backend-deployment
  namespace: default
  labels:
    app: redis-backend
spec:
  replicas: 1
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis-backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: redis-backend
    spec:
      affinity: {}
      containers:
      - name: redis-backend
        image: redis:latest
        imagePullPolicy: Always
        command: ["redis-server"]
        args: ["--requirepass", "$(REDIS_PASSWORD)"]
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis-secret
                key: redis-password
        ports:
        - containerPort: 6379
          protocol: TCP
          name: redis-port
        resources:
          limits:
            cpu: 400m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/redis/data
          name: redis-volume
          subPath: "redis_data"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: redis-volume
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-backend-service
  namespace: default
spec:
  selector:
    app: redis-backend
  ports:
  - port: 6379
    targetPort: redis-port
    nodePort: 30500
    protocol: TCP
  type: NodePort